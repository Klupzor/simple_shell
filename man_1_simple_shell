.Dd 8/4/10               \" DATE
.Dt simple_shell  1      \" Program name and manual section number
.Os
.Sh NAME                 \" Section Header - required - don't modify
.Nm Simple Shell
.Nd command interpreter (shell).
.Sh SYNOPSIS             \" Section Header - required - don't modify
.Nm
.Op Fl abcd              \" [-abcd]
.Op Fl a Ar path         \" [-a path]
.Op Ar file              \" [file]
.Op Ar                   \" [file ...]
.Ar arg0                 \" Underlined argument - use .Ar anywhere to underline
arg2 ...                 \" Arguments
.Sh DESCRIPTION          \" Section Header - required - don't modify
.Nm
is a recreation of the `dash-command interpreter`,this version has
many features which make it appear similar in some respects to the dash.


This man page is not intended to be a tutorial or a complete specification of the shell.

.El                      \" Ends the list
.Pp
.Sh INVOCATION               \" File used or created by the topic of the man page
If no args are present and if the standard input of the shell is connected
to a terminal, the shell is considered an interactive shell.


A interactive shell generally prompts before each command and handles
programming and command errors differently.


When first starting, the shell inspects argument 0,
and if it begins with a dash ‘-’, the shell is also considered a login shell.
This is normally done automatically by the system when the user first logs in.

.Pp

A login shell first reads commands from the files
.Nm /etc/profile
and
.Nm `profile`
if they exist.
If the environment variable
.Nm ENV
is set on entry to an interactive shell,
or is set in the
.Nm `profile`
of a login shell, the shell next reads commands from
the file named in
.Nm ENV.
.Pp

Therefore, a user should place commands that are to be executed only at
login time in the
.Nm `profile`
file, and commands that are executed for every
interactive shell inside the
.Nm ENV
file.  To set the ENV variable to some file,
place the following line in your
.Nm `profile`
of your home directory.

.Pp

If command line arguments besides the options have been specified,
then the shell treats the first argument as the name of a file from which to
read commands (a shell script), and the remaining arguments are set as the
positional parameters of the shell (argv1, argv2, etc).
Otherwise, the shell reads commands from its standard input.

.El                      \" Ends the list

.Sh COMMANDS
Essentially though, a line is read and if the first word of the line
(or after a control operator) is not a reserved word, then the shell has
recognized a simple command.  Otherwise, a complex command or some other special
construct may have been recognized.


.Pp
.Nm Simple Commands

If a simple command has been recognized, the shell performs the following actions:


 1.   Leading words of the form “name=value” are stripped off and assigned to the
 environment of the simple command.  Redirection operators and their arguments
 (as described below) are stripped off and saved for processing.


.Nm Search and Execution

There are three types of commands: shell functions, builtin commands,
and normal programs and the command is searched for (by name) in that order.
They each are executed in a different way.


When a shell function is executed, all of the shell positional parameters
(except $0, which remains unchanged) are set to the arguments of the shell
function.  The variables which are explicitly placed in the environment of the
command are made local to the function and are set to the values given.
Then the command given in the function definition is executed.
The positional parameters are restored to their original values when the
command completes.  This all occurs within the current shell.


.Nm Path Search


When locating a command, the shell first looks to see if it has a shell function
by that name.  Then it looks for a builtin command by that name.
If a builtin command is not found, one of two things happen:


1.Command names containing a slash are simply executed without performing any
searches.


2.The shell searches each entry in PATH in turn for the command.
The value of the PATH variable should be a series of entries separated by colons.
Each entry consists of a directory name.  The current directory may be indicated
implicitly by an empty directory name, or explicitly by a single period.


.Nm Command Exit Status

Each command has an exit status that can influence the behaviour of other shell
commands.  The paradigm is that a command exits with zero for normal or success,
and non-zero for failure, error, or a false indication. The man of each command
can give more information about the exit status.


.Sh Builtins

This section lists the builtin commands which are builtin because they need to
perform some operation that can't be performed by a separate process.
In addition to these, there are several other commands that may be builtin for
efficiency (e.g.  printf(1), echo(1), test(1), etc).

.Pp

.Nm exit:

Terminate the shell process.  If exitstatus is given it is used as the exit
status of the shell; otherwise the exit status of the preceding command is used.
